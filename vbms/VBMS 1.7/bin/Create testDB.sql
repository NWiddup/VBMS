USE [master]
GO

DROP DATABASE mnt
go


/****** Object:  Database [mnt]    Script Date: 09.11.2017 11:25:14 ******/
CREATE DATABASE [mnt]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'mnt', FILENAME = N'C:\SQL\MSSQL13.MSSQLSERVER\MSSQL\DATA\MNT\SQL_Data\mnt.mdf' , SIZE = 2301952KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'mnt_log', FILENAME = N'C:\SQL\MSSQL13.MSSQLSERVER\MSSQL\DATA\MNT\SQL_Data\test.ldf' , SIZE = 860160KB , MAXSIZE = 10485760KB , FILEGROWTH = 65536KB )
GO

ALTER DATABASE [mnt] SET COMPATIBILITY_LEVEL = 100
GO

IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [mnt].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO

ALTER DATABASE [mnt] SET ANSI_NULL_DEFAULT OFF 
GO

ALTER DATABASE [mnt] SET ANSI_NULLS OFF 
GO

ALTER DATABASE [mnt] SET ANSI_PADDING OFF 
GO

ALTER DATABASE [mnt] SET ANSI_WARNINGS OFF 
GO

ALTER DATABASE [mnt] SET ARITHABORT OFF 
GO

ALTER DATABASE [mnt] SET AUTO_CLOSE OFF 
GO

ALTER DATABASE [mnt] SET AUTO_SHRINK OFF 
GO

ALTER DATABASE [mnt] SET AUTO_UPDATE_STATISTICS ON 
GO

ALTER DATABASE [mnt] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO

ALTER DATABASE [mnt] SET CURSOR_DEFAULT  GLOBAL 
GO

ALTER DATABASE [mnt] SET CONCAT_NULL_YIELDS_NULL OFF 
GO

ALTER DATABASE [mnt] SET NUMERIC_ROUNDABORT OFF 
GO

ALTER DATABASE [mnt] SET QUOTED_IDENTIFIER OFF 
GO

ALTER DATABASE [mnt] SET RECURSIVE_TRIGGERS OFF 
GO

ALTER DATABASE [mnt] SET  DISABLE_BROKER 
GO

ALTER DATABASE [mnt] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO

ALTER DATABASE [mnt] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [mnt] SET TRUSTWORTHY OFF 
GO

ALTER DATABASE [mnt] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO

ALTER DATABASE [mnt] SET PARAMETERIZATION SIMPLE 
GO

ALTER DATABASE [mnt] SET READ_COMMITTED_SNAPSHOT OFF 
GO

ALTER DATABASE [mnt] SET HONOR_BROKER_PRIORITY OFF 
GO

ALTER DATABASE [mnt] SET RECOVERY FULL 
GO

ALTER DATABASE [mnt] SET  MULTI_USER 
GO

ALTER DATABASE [mnt] SET PAGE_VERIFY CHECKSUM  
GO

ALTER DATABASE [mnt] SET DB_CHAINING OFF 
GO

ALTER DATABASE [mnt] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO

ALTER DATABASE [mnt] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO

ALTER DATABASE [mnt] SET DELAYED_DURABILITY = DISABLED 
GO

ALTER DATABASE [mnt] SET QUERY_STORE = OFF
GO

USE [mnt]
GO

ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO

ALTER DATABASE [mnt] SET  READ_WRITE 
GO


SET NOCOUNT ON

CREATE TABLE TinyTable
(
	Id int
)
GO

INSERT INTO TinyTable VALUES(1)
GO

CREATE TABLE SmallHeap
(
	Id uniqueidentifier,
	Payload char(100)
)
GO

INSERT INTO SmallHeap VALUES (NEWID(),REPLICATE(N'a',100))

DECLARE @i int
SET @i = 0

WHILE @i < 16
BEGIN
	INSERT INTO SmallHeap SELECT NEWID(),REPLICATE(N'a',100) FROM SmallHeap
	SET @i = @i + 1
END

CREATE TABLE SmallClustered
(
	Id uniqueidentifier primary key,
	Payload char(100)
)
Go


INSERT INTO SmallClustered VALUES (NEWID(),REPLICATE(N'a',100))

DECLARE @i int
SET @i = 0

WHILE @i < 16
BEGIN
	INSERT INTO SmallClustered SELECT NEWID(),REPLICATE(N'a',100) FROM SmallClustered
	SET @i = @i + 1
END
GO

CREATE TABLE SmallClusteredLowFrag
(
	Id uniqueidentifier primary key DEFAULT (NEWSEQUENTIALID()),
	Payload char(100)
)
Go

INSERT INTO SmallClusteredLowFrag VALUES (DEFAULT,REPLICATE(N'a',100))

DECLARE @i int
SET @i = 0

WHILE @i < 16
BEGIN
	INSERT INTO SmallClusteredLowFrag(Payload) SELECT REPLICATE(N'a',100) FROM SmallClusteredLowFrag
	SET @i = @i + 1
END


INSERT INTO SmallClusteredLowFrag VALUES (NEWID(),REPLICATE(N'b',100))
GO	


CREATE TABLE SmallClusteredAvgFrag
(
	Id uniqueidentifier primary key DEFAULT (NEWSEQUENTIALID()),
	Payload char(100)
)
Go

INSERT INTO SmallClusteredAvgFrag VALUES (DEFAULT,REPLICATE(N'a',100))

DECLARE @i int
SET @i = 0

WHILE @i < 16
BEGIN
	INSERT INTO SmallClusteredAvgFrag(Payload) SELECT REPLICATE(N'a',100) FROM SmallClusteredAvgFrag
	SET @i = @i + 1
END

SET @i = 0

WHILE @i < 10 --Ten rows for fragmentation
BEGIN
	INSERT INTO SmallClusteredAvgFrag VALUES (NEWID(),REPLICATE(N'b',100))
	SET @i = @i + 1
END
GO	

CREATE TABLE TextType
(
	Id uniqueidentifier primary key,
	Payload text
)
GO

INSERT INTO TextType VALUES (NEWID(),REPLICATE(N'a',100))

DECLARE @i int
SET @i = 0

WHILE @i < 16
BEGIN
	INSERT INTO TextType SELECT NEWID(),REPLICATE(N'a',100) FROM TextType
	SET @i = @i + 1
END
GO

CREATE TABLE XMLType
(
	Id uniqueidentifier primary key,
	Payload xml
)
GO
CREATE PRIMARY XML INDEX IX_XML_index ON XMLType(Payload)
GO


INSERT INTO XMLType VALUES (NEWID(),'<tag>'+cast(NEWID() as varchar(100))+'</tag>')

DECLARE @i int
SET @i = 0

WHILE @i < 16
BEGIN
	INSERT INTO XMLType SELECT NEWID(),'<tag>'+cast(NEWID() as varchar(100))+'</tag>' FROM XMLType
	SET @i = @i + 1
END
GO



CREATE TABLE XMLAndImageType
(
	Id uniqueidentifier primary key,
	Payload xml, 
	Payload2 image
)
Go

INSERT INTO XMLAndImageType VALUES (NEWID(), '<tag>'+cast(NEWID() as varchar(100))+'</tag>',0x74985743985643875643587436598743)

DECLARE @i int
SET @i = 0

WHILE @i < 16
BEGIN
	INSERT INTO XMLAndImageType SELECT NEWID(),'<tag>'+cast(NEWID() as varchar(100))+'</tag>',0x74985743985643875643587436598743 FROM XMLAndImageType
	SET @i = @i + 1
END
GO

CREATE TABLE BigFragmented
(
	Id uniqueidentifier primary key,
	Int_col int, 
	Date_col datetime,
	BLOB nvarchar(max),
	Overflow1 varchar(5000),
	Overflow2 varchar(5000),
)
GO

CREATE INDEX IX_BF_Int ON BigFragmented(Int_col)
GO
CREATE INDEX IX_BF_date ON BigFragmented(Date_col)
GO

INSERT INTO BigFragmented VALUES (NEWID(),DATEPART(ms,getdate()),getdate(),REPLICATE(N'a',9000),REPLICATE(N'b',5000),REPLICATE(N'b',5000))

DECLARE @i int
SET @i = 0

WHILE @i < 16
BEGIN
	INSERT INTO BigFragmented SELECT NEWID(),DATEPART(ms,getdate()),getdate(),REPLICATE(N'a',9000),REPLICATE(N'b',5000),REPLICATE(N'b',5000) FROM BigFragmented
	SET @i = @i + 1
END
GO


CREATE PARTITION FUNCTION pfInt(int) AS RANGE LEFT FOR VALUES(3000,6000)
GO
CREATE PARTITION SCHEME psInt AS PARTITION pfInt ALL TO (  [PRIMARY]  )
GO

CREATE TABLE PartitionedTable
(
	Id int primary key,
	Int_col int, 
	Date_col datetime,
	Payload nchar(1000)
) ON psInt(Id)
GO

CREATE INDEX IX_Part_int ON PartitionedTable(Int_col) ON psInt(Int_col)

DECLARE @i int

BEGIN TRAN

SET @i = 1 --Odd

WHILE @i < 10000
BEGIN
	INSERT INTO PartitionedTable VALUES(@i,DATEPART(ms,getdate()),getdate(),REPLICATE(N'a',1000))
	SET @i = @i + 2;
END

SET @i = 2 --Even

WHILE @i < 10000
BEGIN
	INSERT INTO PartitionedTable VALUES(@i,DATEPART(ms,getdate()),getdate(),REPLICATE(N'a',1000))
	SET @i = @i + 2;
END

COMMIT TRAN
